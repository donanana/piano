                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module eOrgan_108321062
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _tempo
                                     12 	.globl _main
                                     13 	.globl _timer_1
                                     14 	.globl _timer_0
                                     15 	.globl _LED_Display
                                     16 	.globl _Keypad
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _F1
                                     24 	.globl _P
                                     25 	.globl _PS
                                     26 	.globl _PT1
                                     27 	.globl _PX1
                                     28 	.globl _PT0
                                     29 	.globl _PX0
                                     30 	.globl _RD
                                     31 	.globl _WR
                                     32 	.globl _T1
                                     33 	.globl _T0
                                     34 	.globl _INT1
                                     35 	.globl _INT0
                                     36 	.globl _TXD
                                     37 	.globl _RXD
                                     38 	.globl _P3_7
                                     39 	.globl _P3_6
                                     40 	.globl _P3_5
                                     41 	.globl _P3_4
                                     42 	.globl _P3_3
                                     43 	.globl _P3_2
                                     44 	.globl _P3_1
                                     45 	.globl _P3_0
                                     46 	.globl _EA
                                     47 	.globl _ES
                                     48 	.globl _ET1
                                     49 	.globl _EX1
                                     50 	.globl _ET0
                                     51 	.globl _EX0
                                     52 	.globl _P2_7
                                     53 	.globl _P2_6
                                     54 	.globl _P2_5
                                     55 	.globl _P2_4
                                     56 	.globl _P2_3
                                     57 	.globl _P2_2
                                     58 	.globl _P2_1
                                     59 	.globl _P2_0
                                     60 	.globl _SM0
                                     61 	.globl _SM1
                                     62 	.globl _SM2
                                     63 	.globl _REN
                                     64 	.globl _TB8
                                     65 	.globl _RB8
                                     66 	.globl _TI
                                     67 	.globl _RI
                                     68 	.globl _P1_7
                                     69 	.globl _P1_6
                                     70 	.globl _P1_5
                                     71 	.globl _P1_4
                                     72 	.globl _P1_3
                                     73 	.globl _P1_2
                                     74 	.globl _P1_1
                                     75 	.globl _P1_0
                                     76 	.globl _TF1
                                     77 	.globl _TR1
                                     78 	.globl _TF0
                                     79 	.globl _TR0
                                     80 	.globl _IE1
                                     81 	.globl _IT1
                                     82 	.globl _IE0
                                     83 	.globl _IT0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _B
                                     93 	.globl _ACC
                                     94 	.globl _PSW
                                     95 	.globl _IP
                                     96 	.globl _P3
                                     97 	.globl _IE
                                     98 	.globl _P2
                                     99 	.globl _SBUF
                                    100 	.globl _SCON
                                    101 	.globl _P1
                                    102 	.globl _TH1
                                    103 	.globl _TH0
                                    104 	.globl _TL1
                                    105 	.globl _TL0
                                    106 	.globl _TMOD
                                    107 	.globl _TCON
                                    108 	.globl _PCON
                                    109 	.globl _DPH
                                    110 	.globl _DPL
                                    111 	.globl _SP
                                    112 	.globl _P0
                                    113 	.globl _record_start
                                    114 	.globl _record_key
                                    115 	.globl _record_tone
                                    116 	.globl _tone
                                    117 	.globl _sharp_flat
                                    118 	.globl _tempo_counter
                                    119 	.globl _time_counter
                                    120 	.globl _record_counter
                                    121 	.globl _key
                                    122 	.globl _time
                                    123 	.globl _okey
                                    124 	.globl _fix
                                    125 	.globl _press_value
                                    126 	.globl _num
                                    127 	.globl _display
                                    128 	.globl _initial
                                    129 ;--------------------------------------------------------
                                    130 ; special function registers
                                    131 ;--------------------------------------------------------
                                    132 	.area RSEG    (ABS,DATA)
      000000                        133 	.org 0x0000
                           000080   134 _P0	=	0x0080
                           000081   135 _SP	=	0x0081
                           000082   136 _DPL	=	0x0082
                           000083   137 _DPH	=	0x0083
                           000087   138 _PCON	=	0x0087
                           000088   139 _TCON	=	0x0088
                           000089   140 _TMOD	=	0x0089
                           00008A   141 _TL0	=	0x008a
                           00008B   142 _TL1	=	0x008b
                           00008C   143 _TH0	=	0x008c
                           00008D   144 _TH1	=	0x008d
                           000090   145 _P1	=	0x0090
                           000098   146 _SCON	=	0x0098
                           000099   147 _SBUF	=	0x0099
                           0000A0   148 _P2	=	0x00a0
                           0000A8   149 _IE	=	0x00a8
                           0000B0   150 _P3	=	0x00b0
                           0000B8   151 _IP	=	0x00b8
                           0000D0   152 _PSW	=	0x00d0
                           0000E0   153 _ACC	=	0x00e0
                           0000F0   154 _B	=	0x00f0
                                    155 ;--------------------------------------------------------
                                    156 ; special function bits
                                    157 ;--------------------------------------------------------
                                    158 	.area RSEG    (ABS,DATA)
      000000                        159 	.org 0x0000
                           000080   160 _P0_0	=	0x0080
                           000081   161 _P0_1	=	0x0081
                           000082   162 _P0_2	=	0x0082
                           000083   163 _P0_3	=	0x0083
                           000084   164 _P0_4	=	0x0084
                           000085   165 _P0_5	=	0x0085
                           000086   166 _P0_6	=	0x0086
                           000087   167 _P0_7	=	0x0087
                           000088   168 _IT0	=	0x0088
                           000089   169 _IE0	=	0x0089
                           00008A   170 _IT1	=	0x008a
                           00008B   171 _IE1	=	0x008b
                           00008C   172 _TR0	=	0x008c
                           00008D   173 _TF0	=	0x008d
                           00008E   174 _TR1	=	0x008e
                           00008F   175 _TF1	=	0x008f
                           000090   176 _P1_0	=	0x0090
                           000091   177 _P1_1	=	0x0091
                           000092   178 _P1_2	=	0x0092
                           000093   179 _P1_3	=	0x0093
                           000094   180 _P1_4	=	0x0094
                           000095   181 _P1_5	=	0x0095
                           000096   182 _P1_6	=	0x0096
                           000097   183 _P1_7	=	0x0097
                           000098   184 _RI	=	0x0098
                           000099   185 _TI	=	0x0099
                           00009A   186 _RB8	=	0x009a
                           00009B   187 _TB8	=	0x009b
                           00009C   188 _REN	=	0x009c
                           00009D   189 _SM2	=	0x009d
                           00009E   190 _SM1	=	0x009e
                           00009F   191 _SM0	=	0x009f
                           0000A0   192 _P2_0	=	0x00a0
                           0000A1   193 _P2_1	=	0x00a1
                           0000A2   194 _P2_2	=	0x00a2
                           0000A3   195 _P2_3	=	0x00a3
                           0000A4   196 _P2_4	=	0x00a4
                           0000A5   197 _P2_5	=	0x00a5
                           0000A6   198 _P2_6	=	0x00a6
                           0000A7   199 _P2_7	=	0x00a7
                           0000A8   200 _EX0	=	0x00a8
                           0000A9   201 _ET0	=	0x00a9
                           0000AA   202 _EX1	=	0x00aa
                           0000AB   203 _ET1	=	0x00ab
                           0000AC   204 _ES	=	0x00ac
                           0000AF   205 _EA	=	0x00af
                           0000B0   206 _P3_0	=	0x00b0
                           0000B1   207 _P3_1	=	0x00b1
                           0000B2   208 _P3_2	=	0x00b2
                           0000B3   209 _P3_3	=	0x00b3
                           0000B4   210 _P3_4	=	0x00b4
                           0000B5   211 _P3_5	=	0x00b5
                           0000B6   212 _P3_6	=	0x00b6
                           0000B7   213 _P3_7	=	0x00b7
                           0000B0   214 _RXD	=	0x00b0
                           0000B1   215 _TXD	=	0x00b1
                           0000B2   216 _INT0	=	0x00b2
                           0000B3   217 _INT1	=	0x00b3
                           0000B4   218 _T0	=	0x00b4
                           0000B5   219 _T1	=	0x00b5
                           0000B6   220 _WR	=	0x00b6
                           0000B7   221 _RD	=	0x00b7
                           0000B8   222 _PX0	=	0x00b8
                           0000B9   223 _PT0	=	0x00b9
                           0000BA   224 _PX1	=	0x00ba
                           0000BB   225 _PT1	=	0x00bb
                           0000BC   226 _PS	=	0x00bc
                           0000D0   227 _P	=	0x00d0
                           0000D1   228 _F1	=	0x00d1
                           0000D2   229 _OV	=	0x00d2
                           0000D3   230 _RS0	=	0x00d3
                           0000D4   231 _RS1	=	0x00d4
                           0000D5   232 _F0	=	0x00d5
                           0000D6   233 _AC	=	0x00d6
                           0000D7   234 _CY	=	0x00d7
                                    235 ;--------------------------------------------------------
                                    236 ; overlayable register banks
                                    237 ;--------------------------------------------------------
                                    238 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        239 	.ds 8
                                    240 	.area REG_BANK_1	(REL,OVR,DATA)
      000008                        241 	.ds 8
                                    242 	.area REG_BANK_2	(REL,OVR,DATA)
      000010                        243 	.ds 8
                                    244 ;--------------------------------------------------------
                                    245 ; overlayable bit register bank
                                    246 ;--------------------------------------------------------
                                    247 	.area BIT_BANK	(REL,OVR,DATA)
      000021                        248 bits:
      000021                        249 	.ds 1
                           008000   250 	b0 = bits[0]
                           008100   251 	b1 = bits[1]
                           008200   252 	b2 = bits[2]
                           008300   253 	b3 = bits[3]
                           008400   254 	b4 = bits[4]
                           008500   255 	b5 = bits[5]
                           008600   256 	b6 = bits[6]
                           008700   257 	b7 = bits[7]
                                    258 ;--------------------------------------------------------
                                    259 ; internal ram data
                                    260 ;--------------------------------------------------------
                                    261 	.area DSEG    (DATA)
      000022                        262 _initial::
      000022                        263 	.ds 2
      000024                        264 _display::
      000024                        265 	.ds 1
      000025                        266 _num::
      000025                        267 	.ds 1
      000026                        268 _press_value::
      000026                        269 	.ds 1
      000027                        270 _fix::
      000027                        271 	.ds 1
      000028                        272 _okey::
      000028                        273 	.ds 1
      000029                        274 _time::
      000029                        275 	.ds 1
      00002A                        276 _key::
      00002A                        277 	.ds 1
      00002B                        278 _record_counter::
      00002B                        279 	.ds 1
      00002C                        280 _time_counter::
      00002C                        281 	.ds 1
      00002D                        282 _tempo_counter::
      00002D                        283 	.ds 1
      00002E                        284 _sharp_flat::
      00002E                        285 	.ds 1
      00002F                        286 _tone::
      00002F                        287 	.ds 16
      00003F                        288 _record_tone::
      00003F                        289 	.ds 30
      00005D                        290 _record_key::
      00005D                        291 	.ds 30
                                    292 ;--------------------------------------------------------
                                    293 ; overlayable items in internal ram
                                    294 ;--------------------------------------------------------
                                    295 ;--------------------------------------------------------
                                    296 ; Stack segment in internal ram
                                    297 ;--------------------------------------------------------
                                    298 	.area	SSEG
      00007B                        299 __start__stack:
      00007B                        300 	.ds	1
                                    301 
                                    302 ;--------------------------------------------------------
                                    303 ; indirectly addressable internal ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area ISEG    (DATA)
                                    306 ;--------------------------------------------------------
                                    307 ; absolute internal ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area IABS    (ABS,DATA)
                                    310 	.area IABS    (ABS,DATA)
                                    311 ;--------------------------------------------------------
                                    312 ; bit data
                                    313 ;--------------------------------------------------------
                                    314 	.area BSEG    (BIT)
      000000                        315 _record_start::
      000000                        316 	.ds 1
                                    317 ;--------------------------------------------------------
                                    318 ; paged external ram data
                                    319 ;--------------------------------------------------------
                                    320 	.area PSEG    (PAG,XDATA)
                                    321 ;--------------------------------------------------------
                                    322 ; external ram data
                                    323 ;--------------------------------------------------------
                                    324 	.area XSEG    (XDATA)
                                    325 ;--------------------------------------------------------
                                    326 ; absolute external ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area XABS    (ABS,XDATA)
                                    329 ;--------------------------------------------------------
                                    330 ; external initialized ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area XISEG   (XDATA)
                                    333 	.area HOME    (CODE)
                                    334 	.area GSINIT0 (CODE)
                                    335 	.area GSINIT1 (CODE)
                                    336 	.area GSINIT2 (CODE)
                                    337 	.area GSINIT3 (CODE)
                                    338 	.area GSINIT4 (CODE)
                                    339 	.area GSINIT5 (CODE)
                                    340 	.area GSINIT  (CODE)
                                    341 	.area GSFINAL (CODE)
                                    342 	.area CSEG    (CODE)
                                    343 ;--------------------------------------------------------
                                    344 ; interrupt vector
                                    345 ;--------------------------------------------------------
                                    346 	.area HOME    (CODE)
      000000                        347 __interrupt_vect:
      000000 02 00 21         [24]  348 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  349 	reti
      000004                        350 	.ds	7
      00000B 02 01 59         [24]  351 	ljmp	_timer_0
      00000E                        352 	.ds	5
      000013 32               [24]  353 	reti
      000014                        354 	.ds	7
      00001B 02 04 C6         [24]  355 	ljmp	_timer_1
                                    356 ;--------------------------------------------------------
                                    357 ; global & static initialisations
                                    358 ;--------------------------------------------------------
                                    359 	.area HOME    (CODE)
                                    360 	.area GSINIT  (CODE)
                                    361 	.area GSFINAL (CODE)
                                    362 	.area GSINIT  (CODE)
                                    363 	.globl __sdcc_gsinit_startup
                                    364 	.globl __sdcc_program_startup
                                    365 	.globl __start__stack
                                    366 	.globl __mcs51_genXINIT
                                    367 	.globl __mcs51_genXRAMCLEAR
                                    368 	.globl __mcs51_genRAMCLEAR
                                    369 ;	eOrgan-108321062.c:9: unsigned char okey = 0xff, time = 0, key = 2; // okey:debounce, time:timer_1 interrupt, key = 升降八度, record_start = 允許記錄相關資訊
      00007A 75 28 FF         [24]  370 	mov	_okey,#0xff
                                    371 ;	eOrgan-108321062.c:9: __bit record_start = 0; 
      00007D 75 29 00         [24]  372 	mov	_time,#0x00
                                    373 ;	eOrgan-108321062.c:9: unsigned char okey = 0xff, time = 0, key = 2; // okey:debounce, time:timer_1 interrupt, key = 升降八度, record_start = 允許記錄相關資訊
      000080 75 2A 02         [24]  374 	mov	_key,#0x02
                                    375 ;	eOrgan-108321062.c:11: unsigned char record_counter = 0, time_counter = 0, tempo_counter = 5; // record_counter:數要存在record陣列的位置, time_counter:與fix相呼配合, tempo_counter:數讀的tempo陣列的位置
      000083 75 2B 00         [24]  376 	mov	_record_counter,#0x00
                                    377 ;	eOrgan-108321062.c:11: unsigned char sharp_flat = 0;// shap_flat:0-> none, 1 -> #, 2 -> b 
      000086 75 2C 00         [24]  378 	mov	_time_counter,#0x00
                                    379 ;	eOrgan-108321062.c:11: unsigned char record_counter = 0, time_counter = 0, tempo_counter = 5; // record_counter:數要存在record陣列的位置, time_counter:與fix相呼配合, tempo_counter:數讀的tempo陣列的位置
      000089 75 2D 05         [24]  380 	mov	_tempo_counter,#0x05
                                    381 ;	eOrgan-108321062.c:12: unsigned char sharp_flat = 0;// shap_flat:0-> none, 1 -> #, 2 -> b 
      00008C 75 2E 00         [24]  382 	mov	_sharp_flat,#0x00
                                    383 ;	eOrgan-108321062.c:15: unsigned short tone[] =  
      00008F E4               [12]  384 	clr	a
      000090 F5 2F            [12]  385 	mov	(_tone + 0),a
      000092 F5 30            [12]  386 	mov	(_tone + 1),a
      000094 75 31 06         [24]  387 	mov	((_tone + 0x0002) + 0),#0x06
      000097 75 32 01         [24]  388 	mov	((_tone + 0x0002) + 1),#0x01
      00009A 75 33 26         [24]  389 	mov	((_tone + 0x0004) + 0),#0x26
      00009D 75 34 01         [24]  390 	mov	((_tone + 0x0004) + 1),#0x01
      0000A0 75 35 4A         [24]  391 	mov	((_tone + 0x0006) + 0),#0x4a
      0000A3 75 36 01         [24]  392 	mov	((_tone + 0x0006) + 1),#0x01
      0000A6 75 37 5D         [24]  393 	mov	((_tone + 0x0008) + 0),#0x5d
      0000A9 75 38 01         [24]  394 	mov	((_tone + 0x0008) + 1),#0x01
      0000AC 75 39 88         [24]  395 	mov	((_tone + 0x000a) + 0),#0x88
      0000AF 75 3A 01         [24]  396 	mov	((_tone + 0x000a) + 1),#0x01
      0000B2 75 3B B8         [24]  397 	mov	((_tone + 0x000c) + 0),#0xb8
      0000B5 75 3C 01         [24]  398 	mov	((_tone + 0x000c) + 1),#0x01
      0000B8 75 3D EE         [24]  399 	mov	((_tone + 0x000e) + 0),#0xee
      0000BB 75 3E 01         [24]  400 	mov	((_tone + 0x000e) + 1),#0x01
                                    401 ;	eOrgan-108321062.c:32: unsigned char record_tone[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                                    402 ;	1-genFromRTrack replaced	mov	_record_tone,#0x00
      0000BE F5 3F            [12]  403 	mov	_record_tone,a
                                    404 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0001),#0x00
      0000C0 F5 40            [12]  405 	mov	(_record_tone + 0x0001),a
                                    406 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0002),#0x00
      0000C2 F5 41            [12]  407 	mov	(_record_tone + 0x0002),a
                                    408 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0003),#0x00
      0000C4 F5 42            [12]  409 	mov	(_record_tone + 0x0003),a
                                    410 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0004),#0x00
      0000C6 F5 43            [12]  411 	mov	(_record_tone + 0x0004),a
                                    412 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0005),#0x00
      0000C8 F5 44            [12]  413 	mov	(_record_tone + 0x0005),a
                                    414 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0006),#0x00
      0000CA F5 45            [12]  415 	mov	(_record_tone + 0x0006),a
                                    416 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0007),#0x00
      0000CC F5 46            [12]  417 	mov	(_record_tone + 0x0007),a
                                    418 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0008),#0x00
      0000CE F5 47            [12]  419 	mov	(_record_tone + 0x0008),a
                                    420 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0009),#0x00
      0000D0 F5 48            [12]  421 	mov	(_record_tone + 0x0009),a
                                    422 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000a),#0x00
      0000D2 F5 49            [12]  423 	mov	(_record_tone + 0x000a),a
                                    424 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000b),#0x00
      0000D4 F5 4A            [12]  425 	mov	(_record_tone + 0x000b),a
                                    426 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000c),#0x00
      0000D6 F5 4B            [12]  427 	mov	(_record_tone + 0x000c),a
                                    428 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000d),#0x00
      0000D8 F5 4C            [12]  429 	mov	(_record_tone + 0x000d),a
                                    430 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000e),#0x00
      0000DA F5 4D            [12]  431 	mov	(_record_tone + 0x000e),a
                                    432 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x000f),#0x00
      0000DC F5 4E            [12]  433 	mov	(_record_tone + 0x000f),a
                                    434 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0010),#0x00
      0000DE F5 4F            [12]  435 	mov	(_record_tone + 0x0010),a
                                    436 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0011),#0x00
      0000E0 F5 50            [12]  437 	mov	(_record_tone + 0x0011),a
                                    438 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0012),#0x00
      0000E2 F5 51            [12]  439 	mov	(_record_tone + 0x0012),a
                                    440 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0013),#0x00
      0000E4 F5 52            [12]  441 	mov	(_record_tone + 0x0013),a
                                    442 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0014),#0x00
      0000E6 F5 53            [12]  443 	mov	(_record_tone + 0x0014),a
                                    444 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0015),#0x00
      0000E8 F5 54            [12]  445 	mov	(_record_tone + 0x0015),a
                                    446 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0016),#0x00
      0000EA F5 55            [12]  447 	mov	(_record_tone + 0x0016),a
                                    448 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0017),#0x00
      0000EC F5 56            [12]  449 	mov	(_record_tone + 0x0017),a
                                    450 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0018),#0x00
      0000EE F5 57            [12]  451 	mov	(_record_tone + 0x0018),a
                                    452 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x0019),#0x00
      0000F0 F5 58            [12]  453 	mov	(_record_tone + 0x0019),a
                                    454 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x001a),#0x00
      0000F2 F5 59            [12]  455 	mov	(_record_tone + 0x001a),a
                                    456 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x001b),#0x00
      0000F4 F5 5A            [12]  457 	mov	(_record_tone + 0x001b),a
                                    458 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x001c),#0x00
      0000F6 F5 5B            [12]  459 	mov	(_record_tone + 0x001c),a
                                    460 ;	1-genFromRTrack replaced	mov	(_record_tone + 0x001d),#0x00
      0000F8 F5 5C            [12]  461 	mov	(_record_tone + 0x001d),a
                                    462 ;	eOrgan-108321062.c:33: unsigned char record_key[]={2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};
      0000FA 75 5D 02         [24]  463 	mov	_record_key,#0x02
      0000FD 75 5E 02         [24]  464 	mov	(_record_key + 0x0001),#0x02
      000100 75 5F 02         [24]  465 	mov	(_record_key + 0x0002),#0x02
      000103 75 60 02         [24]  466 	mov	(_record_key + 0x0003),#0x02
      000106 75 61 02         [24]  467 	mov	(_record_key + 0x0004),#0x02
      000109 75 62 02         [24]  468 	mov	(_record_key + 0x0005),#0x02
      00010C 75 63 02         [24]  469 	mov	(_record_key + 0x0006),#0x02
      00010F 75 64 02         [24]  470 	mov	(_record_key + 0x0007),#0x02
      000112 75 65 02         [24]  471 	mov	(_record_key + 0x0008),#0x02
      000115 75 66 02         [24]  472 	mov	(_record_key + 0x0009),#0x02
      000118 75 67 02         [24]  473 	mov	(_record_key + 0x000a),#0x02
      00011B 75 68 02         [24]  474 	mov	(_record_key + 0x000b),#0x02
      00011E 75 69 02         [24]  475 	mov	(_record_key + 0x000c),#0x02
      000121 75 6A 02         [24]  476 	mov	(_record_key + 0x000d),#0x02
      000124 75 6B 02         [24]  477 	mov	(_record_key + 0x000e),#0x02
      000127 75 6C 02         [24]  478 	mov	(_record_key + 0x000f),#0x02
      00012A 75 6D 02         [24]  479 	mov	(_record_key + 0x0010),#0x02
      00012D 75 6E 02         [24]  480 	mov	(_record_key + 0x0011),#0x02
      000130 75 6F 02         [24]  481 	mov	(_record_key + 0x0012),#0x02
      000133 75 70 02         [24]  482 	mov	(_record_key + 0x0013),#0x02
      000136 75 71 02         [24]  483 	mov	(_record_key + 0x0014),#0x02
      000139 75 72 02         [24]  484 	mov	(_record_key + 0x0015),#0x02
      00013C 75 73 02         [24]  485 	mov	(_record_key + 0x0016),#0x02
      00013F 75 74 02         [24]  486 	mov	(_record_key + 0x0017),#0x02
      000142 75 75 02         [24]  487 	mov	(_record_key + 0x0018),#0x02
      000145 75 76 02         [24]  488 	mov	(_record_key + 0x0019),#0x02
      000148 75 77 02         [24]  489 	mov	(_record_key + 0x001a),#0x02
      00014B 75 78 02         [24]  490 	mov	(_record_key + 0x001b),#0x02
      00014E 75 79 02         [24]  491 	mov	(_record_key + 0x001c),#0x02
      000151 75 7A 02         [24]  492 	mov	(_record_key + 0x001d),#0x02
                                    493 ;	eOrgan-108321062.c:10: __bit record_start = 0; 
                                    494 ;	assignBit
      000154 C2 00            [12]  495 	clr	_record_start
                                    496 	.area GSFINAL (CODE)
      000156 02 00 1E         [24]  497 	ljmp	__sdcc_program_startup
                                    498 ;--------------------------------------------------------
                                    499 ; Home
                                    500 ;--------------------------------------------------------
                                    501 	.area HOME    (CODE)
                                    502 	.area HOME    (CODE)
      00001E                        503 __sdcc_program_startup:
      00001E 02 05 15         [24]  504 	ljmp	_main
                                    505 ;	return from main will return to caller
                                    506 ;--------------------------------------------------------
                                    507 ; code
                                    508 ;--------------------------------------------------------
                                    509 	.area CSEG    (CODE)
                                    510 ;------------------------------------------------------------
                                    511 ;Allocation info for local variables in function 'timer_0'
                                    512 ;------------------------------------------------------------
                                    513 ;	eOrgan-108321062.c:52: void timer_0(void) __interrupt (1) __using (1)
                                    514 ;	-----------------------------------------
                                    515 ;	 function timer_0
                                    516 ;	-----------------------------------------
      000159                        517 _timer_0:
                           00000F   518 	ar7 = 0x0f
                           00000E   519 	ar6 = 0x0e
                           00000D   520 	ar5 = 0x0d
                           00000C   521 	ar4 = 0x0c
                           00000B   522 	ar3 = 0x0b
                           00000A   523 	ar2 = 0x0a
                           000009   524 	ar1 = 0x09
                           000008   525 	ar0 = 0x08
      000159 C0 21            [24]  526 	push	bits
      00015B C0 E0            [24]  527 	push	acc
      00015D C0 F0            [24]  528 	push	b
      00015F C0 82            [24]  529 	push	dpl
      000161 C0 83            [24]  530 	push	dph
      000163 C0 07            [24]  531 	push	(0+7)
      000165 C0 06            [24]  532 	push	(0+6)
      000167 C0 05            [24]  533 	push	(0+5)
      000169 C0 04            [24]  534 	push	(0+4)
      00016B C0 03            [24]  535 	push	(0+3)
      00016D C0 02            [24]  536 	push	(0+2)
      00016F C0 01            [24]  537 	push	(0+1)
      000171 C0 00            [24]  538 	push	(0+0)
      000173 C0 D0            [24]  539 	push	psw
      000175 75 D0 08         [24]  540 	mov	psw,#0x08
                                    541 ;	eOrgan-108321062.c:54: if (P1 != 0xf0){ // 1~7 = C~A音階
      000178 74 F0            [12]  542 	mov	a,#0xf0
      00017A B5 90 03         [24]  543 	cjne	a,_P1,00186$
      00017D 02 04 A9         [24]  544 	ljmp	00132$
      000180                        545 00186$:
                                    546 ;	eOrgan-108321062.c:55: if (press_value > 0 && press_value < 8) {
      000180 E5 26            [12]  547 	mov	a,_press_value
      000182 70 03            [24]  548 	jnz	00187$
      000184 02 04 47         [24]  549 	ljmp	00127$
      000187                        550 00187$:
      000187 74 F8            [12]  551 	mov	a,#0x100 - 0x08
      000189 25 26            [12]  552 	add	a,_press_value
      00018B 50 03            [24]  553 	jnc	00188$
      00018D 02 04 47         [24]  554 	ljmp	00127$
      000190                        555 00188$:
                                    556 ;	eOrgan-108321062.c:56: P0 = ~P0;
      000190 E5 80            [12]  557 	mov	a,_P0
      000192 F4               [12]  558 	cpl	a
      000193 F5 80            [12]  559 	mov	_P0,a
                                    560 ;	eOrgan-108321062.c:57: if(sharp_flat == 0){ // 無升降單音
      000195 E5 2E            [12]  561 	mov	a,_sharp_flat
      000197 70 4C            [24]  562 	jnz	00119$
                                    563 ;	eOrgan-108321062.c:58: initial = 65536 -(1000000 / (tone[press_value] * key));
      000199 E5 26            [12]  564 	mov	a,_press_value
      00019B 25 26            [12]  565 	add	a,_press_value
      00019D 24 2F            [12]  566 	add	a,#_tone
      00019F F9               [12]  567 	mov	r1,a
      0001A0 87 82            [24]  568 	mov	dpl,@r1
      0001A2 09               [12]  569 	inc	r1
      0001A3 87 83            [24]  570 	mov	dph,@r1
      0001A5 85 2A 1A         [24]  571 	mov	__mulint_PARM_2,_key
      0001A8 75 1B 00         [24]  572 	mov	(__mulint_PARM_2 + 1),#0x00
      0001AB 75 D0 00         [24]  573 	mov	psw,#0x00
      0001AE 12 07 9D         [24]  574 	lcall	__mulint
      0001B1 75 D0 08         [24]  575 	mov	psw,#0x08
      0001B4 AE 82            [24]  576 	mov	r6,dpl
      0001B6 AF 83            [24]  577 	mov	r7,dph
      0001B8 8E 1A            [24]  578 	mov	__divslong_PARM_2,r6
      0001BA 8F 1B            [24]  579 	mov	(__divslong_PARM_2 + 1),r7
      0001BC 75 1C 00         [24]  580 	mov	(__divslong_PARM_2 + 2),#0x00
      0001BF 75 1D 00         [24]  581 	mov	(__divslong_PARM_2 + 3),#0x00
      0001C2 90 42 40         [24]  582 	mov	dptr,#0x4240
      0001C5 75 F0 0F         [24]  583 	mov	b,#0x0f
      0001C8 E4               [12]  584 	clr	a
      0001C9 75 D0 00         [24]  585 	mov	psw,#0x00
      0001CC 12 07 BA         [24]  586 	lcall	__divslong
      0001CF 75 D0 08         [24]  587 	mov	psw,#0x08
      0001D2 AC 82            [24]  588 	mov	r4,dpl
      0001D4 AD 83            [24]  589 	mov	r5,dph
      0001D6 AE F0            [24]  590 	mov	r6,b
      0001D8 FF               [12]  591 	mov	r7,a
      0001D9 C3               [12]  592 	clr	c
      0001DA E4               [12]  593 	clr	a
      0001DB 9C               [12]  594 	subb	a,r4
      0001DC F5 22            [12]  595 	mov	_initial,a
      0001DE E4               [12]  596 	clr	a
      0001DF 9D               [12]  597 	subb	a,r5
      0001E0 F5 23            [12]  598 	mov	(_initial + 1),a
      0001E2 02 04 24         [24]  599 	ljmp	00120$
      0001E5                        600 00119$:
                                    601 ;	eOrgan-108321062.c:60: else if(sharp_flat == 1){ // 升單音
      0001E5 74 01            [12]  602 	mov	a,#0x01
      0001E7 B5 2E 02         [24]  603 	cjne	a,_sharp_flat,00190$
      0001EA 80 03            [24]  604 	sjmp	00191$
      0001EC                        605 00190$:
      0001EC 02 03 05         [24]  606 	ljmp	00116$
      0001EF                        607 00191$:
                                    608 ;	eOrgan-108321062.c:61: if(press_value == 3){ // E# = F
      0001EF 74 03            [12]  609 	mov	a,#0x03
      0001F1 B5 26 4D         [24]  610 	cjne	a,_press_value,00105$
                                    611 ;	eOrgan-108321062.c:62: initial = 65536 -(1000000 / (tone[press_value + 1] * key));
      0001F4 AF 26            [24]  612 	mov	r7,_press_value
      0001F6 0F               [12]  613 	inc	r7
      0001F7 EF               [12]  614 	mov	a,r7
      0001F8 2F               [12]  615 	add	a,r7
      0001F9 24 2F            [12]  616 	add	a,#_tone
      0001FB F9               [12]  617 	mov	r1,a
      0001FC 87 82            [24]  618 	mov	dpl,@r1
      0001FE 09               [12]  619 	inc	r1
      0001FF 87 83            [24]  620 	mov	dph,@r1
      000201 85 2A 1A         [24]  621 	mov	__mulint_PARM_2,_key
      000204 75 1B 00         [24]  622 	mov	(__mulint_PARM_2 + 1),#0x00
      000207 75 D0 00         [24]  623 	mov	psw,#0x00
      00020A 12 07 9D         [24]  624 	lcall	__mulint
      00020D 75 D0 08         [24]  625 	mov	psw,#0x08
      000210 AE 82            [24]  626 	mov	r6,dpl
      000212 AF 83            [24]  627 	mov	r7,dph
      000214 8E 1A            [24]  628 	mov	__divslong_PARM_2,r6
      000216 8F 1B            [24]  629 	mov	(__divslong_PARM_2 + 1),r7
      000218 75 1C 00         [24]  630 	mov	(__divslong_PARM_2 + 2),#0x00
      00021B 75 1D 00         [24]  631 	mov	(__divslong_PARM_2 + 3),#0x00
      00021E 90 42 40         [24]  632 	mov	dptr,#0x4240
      000221 75 F0 0F         [24]  633 	mov	b,#0x0f
      000224 E4               [12]  634 	clr	a
      000225 75 D0 00         [24]  635 	mov	psw,#0x00
      000228 12 07 BA         [24]  636 	lcall	__divslong
      00022B 75 D0 08         [24]  637 	mov	psw,#0x08
      00022E AC 82            [24]  638 	mov	r4,dpl
      000230 AD 83            [24]  639 	mov	r5,dph
      000232 AE F0            [24]  640 	mov	r6,b
      000234 FF               [12]  641 	mov	r7,a
      000235 C3               [12]  642 	clr	c
      000236 E4               [12]  643 	clr	a
      000237 9C               [12]  644 	subb	a,r4
      000238 F5 22            [12]  645 	mov	_initial,a
      00023A E4               [12]  646 	clr	a
      00023B 9D               [12]  647 	subb	a,r5
      00023C F5 23            [12]  648 	mov	(_initial + 1),a
      00023E 02 04 24         [24]  649 	ljmp	00120$
      000241                        650 00105$:
                                    651 ;	eOrgan-108321062.c:64: else if(press_value == 7){ // B# = high C
      000241 74 07            [12]  652 	mov	a,#0x07
      000243 B5 26 56         [24]  653 	cjne	a,_press_value,00102$
                                    654 ;	eOrgan-108321062.c:65: initial = 65536 -(1000000 / (tone[press_value - 6] * 2 * key));
      000246 E5 26            [12]  655 	mov	a,_press_value
      000248 24 FA            [12]  656 	add	a,#0xfa
      00024A 25 E0            [12]  657 	add	a,acc
      00024C 24 2F            [12]  658 	add	a,#_tone
      00024E F9               [12]  659 	mov	r1,a
      00024F 87 0E            [24]  660 	mov	ar6,@r1
      000251 09               [12]  661 	inc	r1
      000252 87 0F            [24]  662 	mov	ar7,@r1
      000254 EE               [12]  663 	mov	a,r6
      000255 2E               [12]  664 	add	a,r6
      000256 F5 82            [12]  665 	mov	dpl,a
      000258 EF               [12]  666 	mov	a,r7
      000259 33               [12]  667 	rlc	a
      00025A F5 83            [12]  668 	mov	dph,a
      00025C 85 2A 1A         [24]  669 	mov	__mulint_PARM_2,_key
      00025F 75 1B 00         [24]  670 	mov	(__mulint_PARM_2 + 1),#0x00
      000262 75 D0 00         [24]  671 	mov	psw,#0x00
      000265 12 07 9D         [24]  672 	lcall	__mulint
      000268 75 D0 08         [24]  673 	mov	psw,#0x08
      00026B AE 82            [24]  674 	mov	r6,dpl
      00026D AF 83            [24]  675 	mov	r7,dph
      00026F 8E 1A            [24]  676 	mov	__divslong_PARM_2,r6
      000271 8F 1B            [24]  677 	mov	(__divslong_PARM_2 + 1),r7
      000273 75 1C 00         [24]  678 	mov	(__divslong_PARM_2 + 2),#0x00
      000276 75 1D 00         [24]  679 	mov	(__divslong_PARM_2 + 3),#0x00
      000279 90 42 40         [24]  680 	mov	dptr,#0x4240
      00027C 75 F0 0F         [24]  681 	mov	b,#0x0f
      00027F E4               [12]  682 	clr	a
      000280 75 D0 00         [24]  683 	mov	psw,#0x00
      000283 12 07 BA         [24]  684 	lcall	__divslong
      000286 75 D0 08         [24]  685 	mov	psw,#0x08
      000289 AC 82            [24]  686 	mov	r4,dpl
      00028B AD 83            [24]  687 	mov	r5,dph
      00028D AE F0            [24]  688 	mov	r6,b
      00028F FF               [12]  689 	mov	r7,a
      000290 C3               [12]  690 	clr	c
      000291 E4               [12]  691 	clr	a
      000292 9C               [12]  692 	subb	a,r4
      000293 F5 22            [12]  693 	mov	_initial,a
      000295 E4               [12]  694 	clr	a
      000296 9D               [12]  695 	subb	a,r5
      000297 F5 23            [12]  696 	mov	(_initial + 1),a
      000299 02 04 24         [24]  697 	ljmp	00120$
      00029C                        698 00102$:
                                    699 ;	eOrgan-108321062.c:68: initial = 65536 -(1000000 / ((tone[press_value] + tone[press_value + 1])/2 * key));
      00029C E5 26            [12]  700 	mov	a,_press_value
      00029E 25 26            [12]  701 	add	a,_press_value
      0002A0 24 2F            [12]  702 	add	a,#_tone
      0002A2 F9               [12]  703 	mov	r1,a
      0002A3 87 0E            [24]  704 	mov	ar6,@r1
      0002A5 09               [12]  705 	inc	r1
      0002A6 87 0F            [24]  706 	mov	ar7,@r1
      0002A8 AD 26            [24]  707 	mov	r5,_press_value
      0002AA 0D               [12]  708 	inc	r5
      0002AB ED               [12]  709 	mov	a,r5
      0002AC 2D               [12]  710 	add	a,r5
      0002AD 24 2F            [12]  711 	add	a,#_tone
      0002AF F9               [12]  712 	mov	r1,a
      0002B0 87 0C            [24]  713 	mov	ar4,@r1
      0002B2 09               [12]  714 	inc	r1
      0002B3 87 0D            [24]  715 	mov	ar5,@r1
      0002B5 EC               [12]  716 	mov	a,r4
      0002B6 2E               [12]  717 	add	a,r6
      0002B7 FE               [12]  718 	mov	r6,a
      0002B8 ED               [12]  719 	mov	a,r5
      0002B9 3F               [12]  720 	addc	a,r7
      0002BA 8E 82            [24]  721 	mov	dpl,r6
      0002BC C3               [12]  722 	clr	c
      0002BD 13               [12]  723 	rrc	a
      0002BE C5 82            [12]  724 	xch	a,dpl
      0002C0 13               [12]  725 	rrc	a
      0002C1 C5 82            [12]  726 	xch	a,dpl
      0002C3 F5 83            [12]  727 	mov	dph,a
      0002C5 85 2A 1A         [24]  728 	mov	__mulint_PARM_2,_key
      0002C8 75 1B 00         [24]  729 	mov	(__mulint_PARM_2 + 1),#0x00
      0002CB 75 D0 00         [24]  730 	mov	psw,#0x00
      0002CE 12 07 9D         [24]  731 	lcall	__mulint
      0002D1 75 D0 08         [24]  732 	mov	psw,#0x08
      0002D4 AE 82            [24]  733 	mov	r6,dpl
      0002D6 AF 83            [24]  734 	mov	r7,dph
      0002D8 8E 1A            [24]  735 	mov	__divslong_PARM_2,r6
      0002DA 8F 1B            [24]  736 	mov	(__divslong_PARM_2 + 1),r7
      0002DC 75 1C 00         [24]  737 	mov	(__divslong_PARM_2 + 2),#0x00
      0002DF 75 1D 00         [24]  738 	mov	(__divslong_PARM_2 + 3),#0x00
      0002E2 90 42 40         [24]  739 	mov	dptr,#0x4240
      0002E5 75 F0 0F         [24]  740 	mov	b,#0x0f
      0002E8 E4               [12]  741 	clr	a
      0002E9 75 D0 00         [24]  742 	mov	psw,#0x00
      0002EC 12 07 BA         [24]  743 	lcall	__divslong
      0002EF 75 D0 08         [24]  744 	mov	psw,#0x08
      0002F2 AC 82            [24]  745 	mov	r4,dpl
      0002F4 AD 83            [24]  746 	mov	r5,dph
      0002F6 AE F0            [24]  747 	mov	r6,b
      0002F8 FF               [12]  748 	mov	r7,a
      0002F9 C3               [12]  749 	clr	c
      0002FA E4               [12]  750 	clr	a
      0002FB 9C               [12]  751 	subb	a,r4
      0002FC F5 22            [12]  752 	mov	_initial,a
      0002FE E4               [12]  753 	clr	a
      0002FF 9D               [12]  754 	subb	a,r5
      000300 F5 23            [12]  755 	mov	(_initial + 1),a
      000302 02 04 24         [24]  756 	ljmp	00120$
      000305                        757 00116$:
                                    758 ;	eOrgan-108321062.c:71: else if(sharp_flat == 2){ // 降單音
      000305 74 02            [12]  759 	mov	a,#0x02
      000307 B5 2E 02         [24]  760 	cjne	a,_sharp_flat,00196$
      00030A 80 03            [24]  761 	sjmp	00197$
      00030C                        762 00196$:
      00030C 02 04 24         [24]  763 	ljmp	00120$
      00030F                        764 00197$:
                                    765 ;	eOrgan-108321062.c:72: if(press_value == 1){ // Cb = low B 
      00030F 74 01            [12]  766 	mov	a,#0x01
      000311 B5 26 59         [24]  767 	cjne	a,_press_value,00111$
                                    768 ;	eOrgan-108321062.c:73: initial = 65536 -(1000000 / (tone[press_value + 1] / 2 * key));
      000314 AF 26            [24]  769 	mov	r7,_press_value
      000316 0F               [12]  770 	inc	r7
      000317 EF               [12]  771 	mov	a,r7
      000318 2F               [12]  772 	add	a,r7
      000319 24 2F            [12]  773 	add	a,#_tone
      00031B F9               [12]  774 	mov	r1,a
      00031C 87 0E            [24]  775 	mov	ar6,@r1
      00031E 09               [12]  776 	inc	r1
      00031F 87 0F            [24]  777 	mov	ar7,@r1
      000321 8E 82            [24]  778 	mov	dpl,r6
      000323 EF               [12]  779 	mov	a,r7
      000324 C3               [12]  780 	clr	c
      000325 13               [12]  781 	rrc	a
      000326 C5 82            [12]  782 	xch	a,dpl
      000328 13               [12]  783 	rrc	a
      000329 C5 82            [12]  784 	xch	a,dpl
      00032B F5 83            [12]  785 	mov	dph,a
      00032D 85 2A 1A         [24]  786 	mov	__mulint_PARM_2,_key
      000330 75 1B 00         [24]  787 	mov	(__mulint_PARM_2 + 1),#0x00
      000333 75 D0 00         [24]  788 	mov	psw,#0x00
      000336 12 07 9D         [24]  789 	lcall	__mulint
      000339 75 D0 08         [24]  790 	mov	psw,#0x08
      00033C AE 82            [24]  791 	mov	r6,dpl
      00033E AF 83            [24]  792 	mov	r7,dph
      000340 8E 1A            [24]  793 	mov	__divslong_PARM_2,r6
      000342 8F 1B            [24]  794 	mov	(__divslong_PARM_2 + 1),r7
      000344 75 1C 00         [24]  795 	mov	(__divslong_PARM_2 + 2),#0x00
      000347 75 1D 00         [24]  796 	mov	(__divslong_PARM_2 + 3),#0x00
      00034A 90 42 40         [24]  797 	mov	dptr,#0x4240
      00034D 75 F0 0F         [24]  798 	mov	b,#0x0f
      000350 E4               [12]  799 	clr	a
      000351 75 D0 00         [24]  800 	mov	psw,#0x00
      000354 12 07 BA         [24]  801 	lcall	__divslong
      000357 75 D0 08         [24]  802 	mov	psw,#0x08
      00035A AC 82            [24]  803 	mov	r4,dpl
      00035C AD 83            [24]  804 	mov	r5,dph
      00035E AE F0            [24]  805 	mov	r6,b
      000360 FF               [12]  806 	mov	r7,a
      000361 C3               [12]  807 	clr	c
      000362 E4               [12]  808 	clr	a
      000363 9C               [12]  809 	subb	a,r4
      000364 F5 22            [12]  810 	mov	_initial,a
      000366 E4               [12]  811 	clr	a
      000367 9D               [12]  812 	subb	a,r5
      000368 F5 23            [12]  813 	mov	(_initial + 1),a
      00036A 02 04 24         [24]  814 	ljmp	00120$
      00036D                        815 00111$:
                                    816 ;	eOrgan-108321062.c:75: else if(press_value == 4){ // Fb = E
      00036D 74 04            [12]  817 	mov	a,#0x04
      00036F B5 26 4C         [24]  818 	cjne	a,_press_value,00108$
                                    819 ;	eOrgan-108321062.c:76: initial = 65536 -(1000000 / (tone[press_value - 1] * key));
      000372 AF 26            [24]  820 	mov	r7,_press_value
      000374 1F               [12]  821 	dec	r7
      000375 EF               [12]  822 	mov	a,r7
      000376 2F               [12]  823 	add	a,r7
      000377 24 2F            [12]  824 	add	a,#_tone
      000379 F9               [12]  825 	mov	r1,a
      00037A 87 82            [24]  826 	mov	dpl,@r1
      00037C 09               [12]  827 	inc	r1
      00037D 87 83            [24]  828 	mov	dph,@r1
      00037F 85 2A 1A         [24]  829 	mov	__mulint_PARM_2,_key
      000382 75 1B 00         [24]  830 	mov	(__mulint_PARM_2 + 1),#0x00
      000385 75 D0 00         [24]  831 	mov	psw,#0x00
      000388 12 07 9D         [24]  832 	lcall	__mulint
      00038B 75 D0 08         [24]  833 	mov	psw,#0x08
      00038E AE 82            [24]  834 	mov	r6,dpl
      000390 AF 83            [24]  835 	mov	r7,dph
      000392 8E 1A            [24]  836 	mov	__divslong_PARM_2,r6
      000394 8F 1B            [24]  837 	mov	(__divslong_PARM_2 + 1),r7
      000396 75 1C 00         [24]  838 	mov	(__divslong_PARM_2 + 2),#0x00
      000399 75 1D 00         [24]  839 	mov	(__divslong_PARM_2 + 3),#0x00
      00039C 90 42 40         [24]  840 	mov	dptr,#0x4240
      00039F 75 F0 0F         [24]  841 	mov	b,#0x0f
      0003A2 E4               [12]  842 	clr	a
      0003A3 75 D0 00         [24]  843 	mov	psw,#0x00
      0003A6 12 07 BA         [24]  844 	lcall	__divslong
      0003A9 75 D0 08         [24]  845 	mov	psw,#0x08
      0003AC AC 82            [24]  846 	mov	r4,dpl
      0003AE AD 83            [24]  847 	mov	r5,dph
      0003B0 AE F0            [24]  848 	mov	r6,b
      0003B2 FF               [12]  849 	mov	r7,a
      0003B3 C3               [12]  850 	clr	c
      0003B4 E4               [12]  851 	clr	a
      0003B5 9C               [12]  852 	subb	a,r4
      0003B6 F5 22            [12]  853 	mov	_initial,a
      0003B8 E4               [12]  854 	clr	a
      0003B9 9D               [12]  855 	subb	a,r5
      0003BA F5 23            [12]  856 	mov	(_initial + 1),a
      0003BC 80 66            [24]  857 	sjmp	00120$
      0003BE                        858 00108$:
                                    859 ;	eOrgan-108321062.c:78: initial = 65536 -(1000000 / ((tone[press_value-1] + tone[press_value])/2 * key));
      0003BE AF 26            [24]  860 	mov	r7,_press_value
      0003C0 1F               [12]  861 	dec	r7
      0003C1 EF               [12]  862 	mov	a,r7
      0003C2 2F               [12]  863 	add	a,r7
      0003C3 24 2F            [12]  864 	add	a,#_tone
      0003C5 F9               [12]  865 	mov	r1,a
      0003C6 87 0E            [24]  866 	mov	ar6,@r1
      0003C8 09               [12]  867 	inc	r1
      0003C9 87 0F            [24]  868 	mov	ar7,@r1
      0003CB E5 26            [12]  869 	mov	a,_press_value
      0003CD 25 26            [12]  870 	add	a,_press_value
      0003CF 24 2F            [12]  871 	add	a,#_tone
      0003D1 F9               [12]  872 	mov	r1,a
      0003D2 87 0C            [24]  873 	mov	ar4,@r1
      0003D4 09               [12]  874 	inc	r1
      0003D5 87 0D            [24]  875 	mov	ar5,@r1
      0003D7 EC               [12]  876 	mov	a,r4
      0003D8 2E               [12]  877 	add	a,r6
      0003D9 FE               [12]  878 	mov	r6,a
      0003DA ED               [12]  879 	mov	a,r5
      0003DB 3F               [12]  880 	addc	a,r7
      0003DC 8E 82            [24]  881 	mov	dpl,r6
      0003DE C3               [12]  882 	clr	c
      0003DF 13               [12]  883 	rrc	a
      0003E0 C5 82            [12]  884 	xch	a,dpl
      0003E2 13               [12]  885 	rrc	a
      0003E3 C5 82            [12]  886 	xch	a,dpl
      0003E5 F5 83            [12]  887 	mov	dph,a
      0003E7 85 2A 1A         [24]  888 	mov	__mulint_PARM_2,_key
      0003EA 75 1B 00         [24]  889 	mov	(__mulint_PARM_2 + 1),#0x00
      0003ED 75 D0 00         [24]  890 	mov	psw,#0x00
      0003F0 12 07 9D         [24]  891 	lcall	__mulint
      0003F3 75 D0 08         [24]  892 	mov	psw,#0x08
      0003F6 AE 82            [24]  893 	mov	r6,dpl
      0003F8 AF 83            [24]  894 	mov	r7,dph
      0003FA 8E 1A            [24]  895 	mov	__divslong_PARM_2,r6
      0003FC 8F 1B            [24]  896 	mov	(__divslong_PARM_2 + 1),r7
      0003FE 75 1C 00         [24]  897 	mov	(__divslong_PARM_2 + 2),#0x00
      000401 75 1D 00         [24]  898 	mov	(__divslong_PARM_2 + 3),#0x00
      000404 90 42 40         [24]  899 	mov	dptr,#0x4240
      000407 75 F0 0F         [24]  900 	mov	b,#0x0f
      00040A E4               [12]  901 	clr	a
      00040B 75 D0 00         [24]  902 	mov	psw,#0x00
      00040E 12 07 BA         [24]  903 	lcall	__divslong
      000411 75 D0 08         [24]  904 	mov	psw,#0x08
      000414 AC 82            [24]  905 	mov	r4,dpl
      000416 AD 83            [24]  906 	mov	r5,dph
      000418 AE F0            [24]  907 	mov	r6,b
      00041A FF               [12]  908 	mov	r7,a
      00041B C3               [12]  909 	clr	c
      00041C E4               [12]  910 	clr	a
      00041D 9C               [12]  911 	subb	a,r4
      00041E F5 22            [12]  912 	mov	_initial,a
      000420 E4               [12]  913 	clr	a
      000421 9D               [12]  914 	subb	a,r5
      000422 F5 23            [12]  915 	mov	(_initial + 1),a
      000424                        916 00120$:
                                    917 ;	eOrgan-108321062.c:81: TL0 = initial & 0xff; 
      000424 85 22 8A         [24]  918 	mov	_TL0,_initial
                                    919 ;	eOrgan-108321062.c:82: TH0 = initial >> 8; 
      000427 85 23 8C         [24]  920 	mov	_TH0,(_initial + 1)
                                    921 ;	eOrgan-108321062.c:83: if(record_counter < sizeof(record_tone) / sizeof(unsigned char) && record_start == 1){ // 紀錄談奏相關資訊
      00042A 74 E2            [12]  922 	mov	a,#0x100 - 0x1e
      00042C 25 2B            [12]  923 	add	a,_record_counter
      00042E 40 13            [24]  924 	jc	00122$
      000430 30 00 10         [24]  925 	jnb	_record_start,00122$
                                    926 ;	eOrgan-108321062.c:84: record_tone[record_counter] = press_value;
      000433 E5 2B            [12]  927 	mov	a,_record_counter
      000435 24 3F            [12]  928 	add	a,#_record_tone
      000437 F8               [12]  929 	mov	r0,a
      000438 A6 26            [24]  930 	mov	@r0,_press_value
                                    931 ;	eOrgan-108321062.c:85: record_key[record_counter] = key;
      00043A E5 2B            [12]  932 	mov	a,_record_counter
      00043C 24 5D            [12]  933 	add	a,#_record_key
      00043E F8               [12]  934 	mov	r0,a
      00043F A6 2A            [24]  935 	mov	@r0,_key
                                    936 ;	eOrgan-108321062.c:87: record_counter ++;
      000441 05 2B            [12]  937 	inc	_record_counter
      000443                        938 00122$:
                                    939 ;	eOrgan-108321062.c:89: record_start = 0;
                                    940 ;	assignBit
      000443 C2 00            [12]  941 	clr	_record_start
      000445 80 62            [24]  942 	sjmp	00132$
      000447                        943 00127$:
                                    944 ;	eOrgan-108321062.c:91: else if(press_value == 12){ // C 放音樂
      000447 74 0C            [12]  945 	mov	a,#0x0c
      000449 B5 26 5D         [24]  946 	cjne	a,_press_value,00132$
                                    947 ;	eOrgan-108321062.c:92: P0 = ~P0;
      00044C E5 80            [12]  948 	mov	a,_P0
      00044E F4               [12]  949 	cpl	a
      00044F F5 80            [12]  950 	mov	_P0,a
                                    951 ;	eOrgan-108321062.c:93: initial = 65536 -(1000000 / (tone[record_tone[time]] * record_key[time]));
      000451 E5 29            [12]  952 	mov	a,_time
      000453 24 3F            [12]  953 	add	a,#_record_tone
      000455 F9               [12]  954 	mov	r1,a
      000456 E7               [12]  955 	mov	a,@r1
      000457 27               [12]  956 	add	a,@r1
      000458 24 2F            [12]  957 	add	a,#_tone
      00045A F9               [12]  958 	mov	r1,a
      00045B 87 82            [24]  959 	mov	dpl,@r1
      00045D 09               [12]  960 	inc	r1
      00045E 87 83            [24]  961 	mov	dph,@r1
      000460 E5 29            [12]  962 	mov	a,_time
      000462 24 5D            [12]  963 	add	a,#_record_key
      000464 F9               [12]  964 	mov	r1,a
      000465 87 0F            [24]  965 	mov	ar7,@r1
      000467 8F 1A            [24]  966 	mov	__mulint_PARM_2,r7
      000469 75 1B 00         [24]  967 	mov	(__mulint_PARM_2 + 1),#0x00
      00046C 75 D0 00         [24]  968 	mov	psw,#0x00
      00046F 12 07 9D         [24]  969 	lcall	__mulint
      000472 75 D0 08         [24]  970 	mov	psw,#0x08
      000475 AE 82            [24]  971 	mov	r6,dpl
      000477 AF 83            [24]  972 	mov	r7,dph
      000479 8E 1A            [24]  973 	mov	__divslong_PARM_2,r6
      00047B 8F 1B            [24]  974 	mov	(__divslong_PARM_2 + 1),r7
      00047D 75 1C 00         [24]  975 	mov	(__divslong_PARM_2 + 2),#0x00
      000480 75 1D 00         [24]  976 	mov	(__divslong_PARM_2 + 3),#0x00
      000483 90 42 40         [24]  977 	mov	dptr,#0x4240
      000486 75 F0 0F         [24]  978 	mov	b,#0x0f
      000489 E4               [12]  979 	clr	a
      00048A 75 D0 00         [24]  980 	mov	psw,#0x00
      00048D 12 07 BA         [24]  981 	lcall	__divslong
      000490 75 D0 08         [24]  982 	mov	psw,#0x08
      000493 AC 82            [24]  983 	mov	r4,dpl
      000495 AD 83            [24]  984 	mov	r5,dph
      000497 AE F0            [24]  985 	mov	r6,b
      000499 FF               [12]  986 	mov	r7,a
      00049A C3               [12]  987 	clr	c
      00049B E4               [12]  988 	clr	a
      00049C 9C               [12]  989 	subb	a,r4
      00049D F5 22            [12]  990 	mov	_initial,a
      00049F E4               [12]  991 	clr	a
      0004A0 9D               [12]  992 	subb	a,r5
      0004A1 F5 23            [12]  993 	mov	(_initial + 1),a
                                    994 ;	eOrgan-108321062.c:94: TL0 = initial & 0xff;
      0004A3 85 22 8A         [24]  995 	mov	_TL0,_initial
                                    996 ;	eOrgan-108321062.c:95: TH0 = initial >> 8;
      0004A6 85 23 8C         [24]  997 	mov	_TH0,(_initial + 1)
      0004A9                        998 00132$:
                                    999 ;	eOrgan-108321062.c:99: }
      0004A9 D0 D0            [24] 1000 	pop	psw
      0004AB D0 00            [24] 1001 	pop	(0+0)
      0004AD D0 01            [24] 1002 	pop	(0+1)
      0004AF D0 02            [24] 1003 	pop	(0+2)
      0004B1 D0 03            [24] 1004 	pop	(0+3)
      0004B3 D0 04            [24] 1005 	pop	(0+4)
      0004B5 D0 05            [24] 1006 	pop	(0+5)
      0004B7 D0 06            [24] 1007 	pop	(0+6)
      0004B9 D0 07            [24] 1008 	pop	(0+7)
      0004BB D0 83            [24] 1009 	pop	dph
      0004BD D0 82            [24] 1010 	pop	dpl
      0004BF D0 F0            [24] 1011 	pop	b
      0004C1 D0 E0            [24] 1012 	pop	acc
      0004C3 D0 21            [24] 1013 	pop	bits
      0004C5 32               [24] 1014 	reti
                                   1015 ;------------------------------------------------------------
                                   1016 ;Allocation info for local variables in function 'timer_1'
                                   1017 ;------------------------------------------------------------
                                   1018 ;	eOrgan-108321062.c:101: void timer_1(void) __interrupt (3) __using (2){
                                   1019 ;	-----------------------------------------
                                   1020 ;	 function timer_1
                                   1021 ;	-----------------------------------------
      0004C6                       1022 _timer_1:
                           000017  1023 	ar7 = 0x17
                           000016  1024 	ar6 = 0x16
                           000015  1025 	ar5 = 0x15
                           000014  1026 	ar4 = 0x14
                           000013  1027 	ar3 = 0x13
                           000012  1028 	ar2 = 0x12
                           000011  1029 	ar1 = 0x11
                           000010  1030 	ar0 = 0x10
      0004C6 C0 E0            [24] 1031 	push	acc
      0004C8 C0 D0            [24] 1032 	push	psw
      0004CA 75 D0 10         [24] 1033 	mov	psw,#0x10
                                   1034 ;	eOrgan-108321062.c:102: if (P1 != 0xf0){
      0004CD 74 F0            [12] 1035 	mov	a,#0xf0
      0004CF B5 90 02         [24] 1036 	cjne	a,_P1,00135$
      0004D2 80 3C            [24] 1037 	sjmp	00113$
      0004D4                       1038 00135$:
                                   1039 ;	eOrgan-108321062.c:103: if(press_value == 12){ // C 放音樂
      0004D4 74 0C            [12] 1040 	mov	a,#0x0c
      0004D6 B5 26 37         [24] 1041 	cjne	a,_press_value,00113$
                                   1042 ;	eOrgan-108321062.c:104: time_counter += 1;
      0004D9 E5 2C            [12] 1043 	mov	a,_time_counter
      0004DB FF               [12] 1044 	mov	r7,a
      0004DC 04               [12] 1045 	inc	a
      0004DD F5 2C            [12] 1046 	mov	_time_counter,a
                                   1047 ;	eOrgan-108321062.c:106: if(tempo_counter > 3){
      0004DF E5 2D            [12] 1048 	mov	a,_tempo_counter
      0004E1 24 FC            [12] 1049 	add	a,#0xff - 0x03
      0004E3 50 05            [24] 1050 	jnc	00102$
                                   1051 ;	eOrgan-108321062.c:107: fix = 10;
      0004E5 75 27 0A         [24] 1052 	mov	_fix,#0x0a
      0004E8 80 03            [24] 1053 	sjmp	00103$
      0004EA                       1054 00102$:
                                   1055 ;	eOrgan-108321062.c:109: fix = 100;
      0004EA 75 27 64         [24] 1056 	mov	_fix,#0x64
      0004ED                       1057 00103$:
                                   1058 ;	eOrgan-108321062.c:111: if (time_counter >= fix){ // 為下次單音撥放做準備
      0004ED C3               [12] 1059 	clr	c
      0004EE E5 2C            [12] 1060 	mov	a,_time_counter
      0004F0 95 27            [12] 1061 	subb	a,_fix
      0004F2 40 16            [24] 1062 	jc	00108$
                                   1063 ;	eOrgan-108321062.c:112: time_counter = 0;
      0004F4 75 2C 00         [24] 1064 	mov	_time_counter,#0x00
                                   1065 ;	eOrgan-108321062.c:113: time ++;
      0004F7 05 29            [12] 1066 	inc	_time
                                   1067 ;	eOrgan-108321062.c:115: if (time >= sizeof(record_tone) / sizeof(unsigned char) || record_tone[time] == 0){
      0004F9 74 E2            [12] 1068 	mov	a,#0x100 - 0x1e
      0004FB 25 29            [12] 1069 	add	a,_time
      0004FD 40 08            [24] 1070 	jc	00104$
      0004FF E5 29            [12] 1071 	mov	a,_time
      000501 24 3F            [12] 1072 	add	a,#_record_tone
      000503 F9               [12] 1073 	mov	r1,a
      000504 E7               [12] 1074 	mov	a,@r1
      000505 70 03            [24] 1075 	jnz	00108$
      000507                       1076 00104$:
                                   1077 ;	eOrgan-108321062.c:116: time = 0;
      000507 75 29 00         [24] 1078 	mov	_time,#0x00
      00050A                       1079 00108$:
                                   1080 ;	eOrgan-108321062.c:119: TL1 = TIMER_TEMPO & 0xff;
      00050A 75 8B EF         [24] 1081 	mov	_TL1,#0xef
                                   1082 ;	eOrgan-108321062.c:120: TH1 = TIMER_TEMPO >> 8;
      00050D 75 8D D8         [24] 1083 	mov	_TH1,#0xd8
      000510                       1084 00113$:
                                   1085 ;	eOrgan-108321062.c:123: }
      000510 D0 D0            [24] 1086 	pop	psw
      000512 D0 E0            [24] 1087 	pop	acc
      000514 32               [24] 1088 	reti
                                   1089 ;	eliminated unneeded push/pop dpl
                                   1090 ;	eliminated unneeded push/pop dph
                                   1091 ;	eliminated unneeded push/pop b
                                   1092 ;------------------------------------------------------------
                                   1093 ;Allocation info for local variables in function 'main'
                                   1094 ;------------------------------------------------------------
                                   1095 ;i                         Allocated to registers r7 
                                   1096 ;------------------------------------------------------------
                                   1097 ;	eOrgan-108321062.c:125: void main() 
                                   1098 ;	-----------------------------------------
                                   1099 ;	 function main
                                   1100 ;	-----------------------------------------
      000515                       1101 _main:
                           000007  1102 	ar7 = 0x07
                           000006  1103 	ar6 = 0x06
                           000005  1104 	ar5 = 0x05
                           000004  1105 	ar4 = 0x04
                           000003  1106 	ar3 = 0x03
                           000002  1107 	ar2 = 0x02
                           000001  1108 	ar1 = 0x01
                           000000  1109 	ar0 = 0x00
                                   1110 ;	eOrgan-108321062.c:127: P0 = 0xf0;                                                  // speaker and 7-display location 
      000515 75 80 F0         [24] 1111 	mov	_P0,#0xf0
                                   1112 ;	eOrgan-108321062.c:128: P1 = 0xf0;                                                  // 4*4keypad
      000518 75 90 F0         [24] 1113 	mov	_P1,#0xf0
                                   1114 ;	eOrgan-108321062.c:129: P2 = 0xff;                                                  // LED number
      00051B 75 A0 FF         [24] 1115 	mov	_P2,#0xff
                                   1116 ;	eOrgan-108321062.c:131: TMOD = 0x11; 
      00051E 75 89 11         [24] 1117 	mov	_TMOD,#0x11
                                   1118 ;	eOrgan-108321062.c:132: TCON = 0x50;
      000521 75 88 50         [24] 1119 	mov	_TCON,#0x50
                                   1120 ;	eOrgan-108321062.c:133: IE = 0x8a;
      000524 75 A8 8A         [24] 1121 	mov	_IE,#0x8a
                                   1122 ;	eOrgan-108321062.c:135: while (1) {
      000527 7F 00            [12] 1123 	mov	r7,#0x00
      000529                       1124 00134$:
                                   1125 ;	eOrgan-108321062.c:136: num = Keypad();
      000529 C0 07            [24] 1126 	push	ar7
      00052B 12 08 C5         [24] 1127 	lcall	_Keypad
      00052E 85 82 25         [24] 1128 	mov	_num,dpl
      000531 D0 07            [24] 1129 	pop	ar7
                                   1130 ;	eOrgan-108321062.c:137: if (num != okey && okey == 0xff) {
      000533 E5 28            [12] 1131 	mov	a,_okey
      000535 B5 25 03         [24] 1132 	cjne	a,_num,00213$
      000538 02 06 1B         [24] 1133 	ljmp	00131$
      00053B                       1134 00213$:
      00053B 74 FF            [12] 1135 	mov	a,#0xff
      00053D B5 28 02         [24] 1136 	cjne	a,_okey,00214$
      000540 80 03            [24] 1137 	sjmp	00215$
      000542                       1138 00214$:
      000542 02 06 1B         [24] 1139 	ljmp	00131$
      000545                       1140 00215$:
                                   1141 ;	eOrgan-108321062.c:138: display = num;
      000545 85 25 24         [24] 1142 	mov	_display,_num
                                   1143 ;	eOrgan-108321062.c:139: press_value = num;
      000548 85 25 26         [24] 1144 	mov	_press_value,_num
                                   1145 ;	eOrgan-108321062.c:140: record_start = 1;
                                   1146 ;	assignBit
      00054B D2 00            [12] 1147 	setb	_record_start
                                   1148 ;	eOrgan-108321062.c:142: if(press_value == 0){ // 0 重置
      00054D E5 26            [12] 1149 	mov	a,_press_value
      00054F 70 23            [24] 1150 	jnz	00110$
                                   1151 ;	eOrgan-108321062.c:146: record_counter = 0;
      000551 8F 06            [24] 1152 	mov	ar6,r7
      000553                       1153 00137$:
                                   1154 ;	eOrgan-108321062.c:143: for(char i; i <= sizeof(record_tone) / sizeof(unsigned char); i++){
      000553 EE               [12] 1155 	mov	a,r6
      000554 24 E1            [12] 1156 	add	a,#0xff - 0x1e
      000556 40 09            [24] 1157 	jc	00158$
                                   1158 ;	eOrgan-108321062.c:144: record_tone[i] = 0;
      000558 EE               [12] 1159 	mov	a,r6
      000559 24 3F            [12] 1160 	add	a,#_record_tone
      00055B F8               [12] 1161 	mov	r0,a
      00055C 76 00            [12] 1162 	mov	@r0,#0x00
                                   1163 ;	eOrgan-108321062.c:143: for(char i; i <= sizeof(record_tone) / sizeof(unsigned char); i++){
      00055E 0E               [12] 1164 	inc	r6
      00055F 80 F2            [24] 1165 	sjmp	00137$
      000561                       1166 00158$:
      000561 8E 07            [24] 1167 	mov	ar7,r6
                                   1168 ;	eOrgan-108321062.c:146: record_counter = 0;
      000563 75 2B 00         [24] 1169 	mov	_record_counter,#0x00
                                   1170 ;	eOrgan-108321062.c:147: tempo_counter = 5;
      000566 75 2D 05         [24] 1171 	mov	_tempo_counter,#0x05
                                   1172 ;	eOrgan-108321062.c:148: time_counter = 0;
      000569 75 2C 00         [24] 1173 	mov	_time_counter,#0x00
                                   1174 ;	eOrgan-108321062.c:149: time = 0;
      00056C 75 29 00         [24] 1175 	mov	_time,#0x00
                                   1176 ;	eOrgan-108321062.c:150: key = 2;
      00056F 75 2A 02         [24] 1177 	mov	_key,#0x02
      000572 80 5D            [24] 1178 	sjmp	00111$
      000574                       1179 00110$:
                                   1180 ;	eOrgan-108321062.c:152: else if (press_value == 8 && key > 1){ // 8 降key
      000574 74 08            [12] 1181 	mov	a,#0x08
      000576 B5 26 46         [24] 1182 	cjne	a,_press_value,00106$
      000579 E5 2A            [12] 1183 	mov	a,_key
      00057B 24 FE            [12] 1184 	add	a,#0xff - 0x01
      00057D 50 40            [24] 1185 	jnc	00106$
                                   1186 ;	eOrgan-108321062.c:153: key *= 0.5;
      00057F 85 2A 82         [24] 1187 	mov	dpl,_key
      000582 C0 07            [24] 1188 	push	ar7
      000584 12 08 B2         [24] 1189 	lcall	___uchar2fs
      000587 AB 82            [24] 1190 	mov	r3,dpl
      000589 AC 83            [24] 1191 	mov	r4,dph
      00058B AD F0            [24] 1192 	mov	r5,b
      00058D FE               [12] 1193 	mov	r6,a
      00058E C0 03            [24] 1194 	push	ar3
      000590 C0 04            [24] 1195 	push	ar4
      000592 C0 05            [24] 1196 	push	ar5
      000594 C0 06            [24] 1197 	push	ar6
      000596 90 00 00         [24] 1198 	mov	dptr,#(0x00&0x00ff)
      000599 E4               [12] 1199 	clr	a
      00059A F5 F0            [12] 1200 	mov	b,a
      00059C 74 3F            [12] 1201 	mov	a,#0x3f
      00059E 12 06 99         [24] 1202 	lcall	___fsmul
      0005A1 AB 82            [24] 1203 	mov	r3,dpl
      0005A3 AC 83            [24] 1204 	mov	r4,dph
      0005A5 AD F0            [24] 1205 	mov	r5,b
      0005A7 FE               [12] 1206 	mov	r6,a
      0005A8 E5 81            [12] 1207 	mov	a,sp
      0005AA 24 FC            [12] 1208 	add	a,#0xfc
      0005AC F5 81            [12] 1209 	mov	sp,a
      0005AE 8B 82            [24] 1210 	mov	dpl,r3
      0005B0 8C 83            [24] 1211 	mov	dph,r4
      0005B2 8D F0            [24] 1212 	mov	b,r5
      0005B4 EE               [12] 1213 	mov	a,r6
      0005B5 12 08 BD         [24] 1214 	lcall	___fs2uchar
      0005B8 85 82 2A         [24] 1215 	mov	_key,dpl
      0005BB D0 07            [24] 1216 	pop	ar7
      0005BD 80 12            [24] 1217 	sjmp	00111$
      0005BF                       1218 00106$:
                                   1219 ;	eOrgan-108321062.c:155: else if (press_value == 9 && key < 128){ // 9 升key
      0005BF 74 09            [12] 1220 	mov	a,#0x09
      0005C1 B5 26 0D         [24] 1221 	cjne	a,_press_value,00111$
      0005C4 74 80            [12] 1222 	mov	a,#0x100 - 0x80
      0005C6 25 2A            [12] 1223 	add	a,_key
      0005C8 40 07            [24] 1224 	jc	00111$
                                   1225 ;	eOrgan-108321062.c:156: key *= 2;
      0005CA E5 2A            [12] 1226 	mov	a,_key
      0005CC FE               [12] 1227 	mov	r6,a
      0005CD 25 E0            [12] 1228 	add	a,acc
      0005CF F5 2A            [12] 1229 	mov	_key,a
      0005D1                       1230 00111$:
                                   1231 ;	eOrgan-108321062.c:158: if(press_value == 10 && tempo_counter > 0){ // A 減速
      0005D1 74 0A            [12] 1232 	mov	a,#0x0a
      0005D3 B5 26 09         [24] 1233 	cjne	a,_press_value,00113$
      0005D6 E5 2D            [12] 1234 	mov	a,_tempo_counter
      0005D8 60 05            [24] 1235 	jz	00113$
                                   1236 ;	eOrgan-108321062.c:159: tempo_counter --;
      0005DA 15 2D            [12] 1237 	dec	_tempo_counter
                                   1238 ;	eOrgan-108321062.c:160: display = tempo_counter;
      0005DC 85 2D 24         [24] 1239 	mov	_display,_tempo_counter
      0005DF                       1240 00113$:
                                   1241 ;	eOrgan-108321062.c:162: if(press_value == 11 && tempo_counter < 9){ // B 加速
      0005DF 74 0B            [12] 1242 	mov	a,#0x0b
      0005E1 B5 26 0B         [24] 1243 	cjne	a,_press_value,00116$
      0005E4 74 F7            [12] 1244 	mov	a,#0x100 - 0x09
      0005E6 25 2D            [12] 1245 	add	a,_tempo_counter
      0005E8 40 05            [24] 1246 	jc	00116$
                                   1247 ;	eOrgan-108321062.c:163: tempo_counter ++;
      0005EA 05 2D            [12] 1248 	inc	_tempo_counter
                                   1249 ;	eOrgan-108321062.c:164: display = tempo_counter;
      0005EC 85 2D 24         [24] 1250 	mov	_display,_tempo_counter
      0005EF                       1251 00116$:
                                   1252 ;	eOrgan-108321062.c:166: if(press_value == 13){ // D 升單音
      0005EF 74 0D            [12] 1253 	mov	a,#0x0d
      0005F1 B5 26 11         [24] 1254 	cjne	a,_press_value,00123$
                                   1255 ;	eOrgan-108321062.c:167: if(sharp_flat == 0 || sharp_flat == 2){ 
      0005F4 E5 2E            [12] 1256 	mov	a,_sharp_flat
      0005F6 60 05            [24] 1257 	jz	00118$
      0005F8 74 02            [12] 1258 	mov	a,#0x02
      0005FA B5 2E 05         [24] 1259 	cjne	a,_sharp_flat,00119$
      0005FD                       1260 00118$:
                                   1261 ;	eOrgan-108321062.c:168: sharp_flat = 1;
      0005FD 75 2E 01         [24] 1262 	mov	_sharp_flat,#0x01
      000600 80 03            [24] 1263 	sjmp	00123$
      000602                       1264 00119$:
                                   1265 ;	eOrgan-108321062.c:170: sharp_flat = 0; // 在按一次回復無升降音
      000602 75 2E 00         [24] 1266 	mov	_sharp_flat,#0x00
      000605                       1267 00123$:
                                   1268 ;	eOrgan-108321062.c:173: if(press_value == 14){ // E 降單音
      000605 74 0E            [12] 1269 	mov	a,#0x0e
      000607 B5 26 11         [24] 1270 	cjne	a,_press_value,00131$
                                   1271 ;	eOrgan-108321062.c:174: if(sharp_flat == 0 || sharp_flat == 1){
      00060A E5 2E            [12] 1272 	mov	a,_sharp_flat
      00060C 60 05            [24] 1273 	jz	00124$
      00060E 74 01            [12] 1274 	mov	a,#0x01
      000610 B5 2E 05         [24] 1275 	cjne	a,_sharp_flat,00125$
      000613                       1276 00124$:
                                   1277 ;	eOrgan-108321062.c:175: sharp_flat = 2;
      000613 75 2E 02         [24] 1278 	mov	_sharp_flat,#0x02
      000616 80 03            [24] 1279 	sjmp	00131$
      000618                       1280 00125$:
                                   1281 ;	eOrgan-108321062.c:177: sharp_flat = 0; // 在按一次回復無升降音
      000618 75 2E 00         [24] 1282 	mov	_sharp_flat,#0x00
      00061B                       1283 00131$:
                                   1284 ;	eOrgan-108321062.c:181: LED_Display(display);
      00061B AC 24            [24] 1285 	mov	r4,_display
      00061D 7D 00            [12] 1286 	mov	r5,#0x00
      00061F 7E 00            [12] 1287 	mov	r6,#0x00
      000621 8C 82            [24] 1288 	mov	dpl,r4
      000623 8D 83            [24] 1289 	mov	dph,r5
      000625 8E F0            [24] 1290 	mov	b,r6
      000627 C0 07            [24] 1291 	push	ar7
      000629 12 08 52         [24] 1292 	lcall	_LED_Display
      00062C D0 07            [24] 1293 	pop	ar7
                                   1294 ;	eOrgan-108321062.c:182: okey = num;
      00062E 85 25 28         [24] 1295 	mov	_okey,_num
                                   1296 ;	eOrgan-108321062.c:184: }
      000631 02 05 29         [24] 1297 	ljmp	00134$
                                   1298 	.area CSEG    (CODE)
                                   1299 	.area CONST   (CODE)
      0009DE                       1300 _tempo:
      0009DE EF                    1301 	.db #0xef	; 239
      0009DF 28                    1302 	.db #0x28	; 40
      0009E0 40                    1303 	.db #0x40	; 64
      0009E1 58                    1304 	.db #0x58	; 88	'X'
      0009E2 60                    1305 	.db #0x60	; 96
      0009E3 50                    1306 	.db #0x50	; 80	'P'
      0009E4 40                    1307 	.db #0x40	; 64
      0009E5 30                    1308 	.db #0x30	; 48	'0'
      0009E6 20                    1309 	.db #0x20	; 32
      0009E7 10                    1310 	.db #0x10	; 16
                                   1311 	.area XINIT   (CODE)
                                   1312 	.area CABS    (ABS,CODE)
